// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


enum UserRole {
  ADMIN
  RESEARCHER
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  name    String
  country String
  gender  Gender
  bio     String?
  age     String
  password String
  institutionId String
  institution Institution   @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  role        UserRole  @default(RESEARCHER)
  emailVerified DateTime?
  phone        String? 
  image         String?
  researchId    String?
  reviews     Review[]
  files       File[]
  feedbackType Feedback[]
  departmentId  String?
  departments  Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  authority       String?
  research Research[]
  Post      Post[]
  comment   Comment[]
  likes       Like[]
  reply   Reply[]
  collaborator  Collaborator[]
  choices     SurveyFormAnswer[]
  notifications  Notification[]
  chats     Chat[]
  messages  Message[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime    @default(now())
}

model ResearchCategory {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  category      String   @unique
  label         String   @unique
  description   String
  papers        Research[]
  createdAt   DateTime   @default(now())
}


enum ResearchStatus {
  DEVELOPMENT
  APPROVED
  PENDING
  DISAPPROVED
}

model Research {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  views       Int @default(0)
  creatorId   String
  categoryId   String
  keyWords    String
  field       String
  citeReference String
  abstract      String?
  Published DateTime?
  publicationDate DateTime?
  status      ResearchStatus  @default(DEVELOPMENT)
  doi           String?
  journal       String?
  conference    String?
  institutionId String
  tag           Tag[]
  volume        String?
  issue         String?
  citationTrend CitationTrend[]
  downloadTrend DownloadTrend[]
  updatedAt     DateTime    @updatedAt
  creatorName String
  affiliation String
  subjectAreas   ResearchSubjectArea[]
  impactMetrics  ResearchImpactMetric[]
  review      Review[]
  surveys     Survey[]
  category    ResearchCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  authors     String
  files       File[]
  user        User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  institution  Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  collaborator  Collaborator[]
  reference    Reference[]
  createdAt   DateTime   @default(now())
}

model ResearchSubjectArea {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  value       Int  
  researchId  String
  research    Research @relation(fields: [researchId], references: [id], onDelete: Cascade)
}

model ResearchImpactMetric {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  subject      String    // e.g., "Citations", "Downloads", "Social Media"
  value        Int
  fullMark     Int       // The maximum value for comparison (e.g., full mark out of 150)
  researchId   String
  research     Research  @relation(fields: [researchId], references: [id], onDelete: Cascade)
}


model CitationTrend {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  month       String    
  year        Int 
  citations   Int
  researchId  String
  research    Research  @relation(fields: [researchId], references: [id], onDelete: Cascade)
}

model DownloadTrend {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  month       String    
  year        Int
  downloads   Int
  researchId  String
  research    Research  @relation(fields: [researchId], references: [id], onDelete: Cascade)
}

model Collaborator {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  userId        String              
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  affiliation   String              
  role          CollaboratorRole
  researchId    String
  research    Research        @relation(fields: [researchId], references: [id], onDelete: Cascade)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

enum CollaboratorRole {
  LEAD
  CO_AUTHOR
  CONTRIBUTOR
}

model Reference {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  researchId     String 
  research       Research  @relation(fields: [researchId], references: [id], onDelete: Cascade) 
  title         String
  authors       String
  fullReference String?
  journal       String?  
  bookTitle     String?  
  publisher     String?   
  volume        String? 
  issue         String?  
  pages         String? 
  year          String?      
  doi           String?  
  url           String?  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model File {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  url          String    // URL or path to the file
  filename     String    // Original file name
  mimetype     String?    // MIME type of the file (e.g., application/pdf)
  fileType     String
  researchId   String
  contentId    String?
  content      Content?    @relation(fields: [contentId], references: [id], onDelete: Cascade)
  research     Research  @relation(fields: [researchId], references: [id], onDelete: Cascade)
  uploadedById String
  uploadedBy   User      @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum QuestionType {
  Paragraph
  Multiple_Choice
  Short_Answer
  Rating
}

enum SurveyStatus {
  draft
  active
  archived
}

model Survey {
   id         String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  label       String
  status      SurveyStatus  @default(draft)
  creatorId   String?
  creatorName String
  aiAnalyze   String?
  surveyForm  SurveyForm[]
  researchId  String
  research     Research    @relation(fields: [researchId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
}

model SurveyForm {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  img         String?
  estimatedTime Int @default(0)
  description String
  label       String
  status      SurveyStatus @default(draft)
  identity    Boolean
  guildelines  String
  creatorId   String
  creatorName String
  importance  Importance @default(high)
  questions   SurveyFormQuestion[]
  surveyId    String
  survey      Survey    @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
}

enum Importance {
  low
  medium
  high
}

model SurveyFormQuestion {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  image    String?
  type     QuestionType
  rating   Int?
  options  Option[]
  choices  SurveyFormAnswer[]
  formId   String
  author   String
  authorId String
  form     SurveyForm     @relation(fields: [formId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
}

model Option {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  question   SurveyFormQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
}

model SurveyFormAnswer {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  answer     String
  userId     String?
  startTime    DateTime
  endTime       DateTime
  timeTaken     Float
  questionId String
  user        User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   SurveyFormQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}


model Tag {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  researchId  String
  research    Research @relation(fields: [researchId], references: [id], onDelete: Cascade)
}

model Review {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  researchId   String
  reviewerId String
  comment   String?
  rating    Int?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  research  Research @relation(fields: [researchId], references: [id], onDelete: Cascade)
  reviewer  User          @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
}

model Institution {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  research  Research[]
  members   User[]
  location  String
  type      String
  website   String?
  logo   String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Notification {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  receiverId    String
  from          String
  senderId    String
  title       String
  description String
  to            User          @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  status        NotificationStatus
  content       String
  createdAt     DateTime    @default(now())
  readAt        DateTime?
}

model Feedback {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String?
  name          String
  email        String?
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating       Int?     
  comments     String
  feedbackType FeedbackType
  createdAt    DateTime @default(now())
}

enum FeedbackType {
  GENERAL 
  SURVEY_ANALYSIS  
  BUG_REPORT 
  FEATURE_REQUEST
  OTHER
}

enum NotificationStatus {
  UNREAD
  READ
}

model Department {
  id     String        @id @default(auto()) @map("_id") @db.ObjectId
  name   String        @unique
  createdBy String
  user User[]
  role    Roles[]
  createdAt     DateTime    @default(now())
}

model Roles {
  id     String        @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  departmentId    String
  department      Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
}

model Content {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  image        String?
  video         String?
  creatorId    String
  creatorName   String
  creatorImage   String?
  creatorRole   String
  category      String
  likes         Like[]
  comment       Comment[]
  files         File[]
  slug        String   @unique
  body        String
  type        ContentType
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ContentType {
  BLOG
  ANNOUNCEMENT
  DISCOVERY
  EVENT
  SUPPORT
}

model Category {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String       @unique
  creatorId  String
  createdAt  DateTime @default(now())

}

enum EventsTypes {
  ORGANIZATION
  GENERAL
  INSTITUTION
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  location    String
  description String
  type        EventsTypes
  startDate   DateTime
  endDate     DateTime
  startTime   String
  img         String?
  video       String?
  userEmail   String
  createdAt DateTime @default(now())
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  body        String
  slug        String  @unique
  img         String?
  video       String?
  tag         String
  pdf         String?
  userId      String
  likes       Like[]
  comment     Comment[]
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt  DateTime?
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  comment     String
  img         String?
  userId      String
  likes       Like[]
  postId      String?
  contentId   String?
  content     Content?  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  reply       Reply[]
  post        Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt  DateTime?
}

model Reply {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  reply     String
  userId      String
  likes       Like[]
  commentId   String
  comment     Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt  DateTime?
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  commentId String?
  replyId   String?
  contentId  String?
  content   Content?      @relation(fields: [contentId], references: [id])
  postId    String?
  reply     Reply ?       @relation(fields: [replyId], references: [id])
  comment    Comment?   @relation(fields: [commentId], references: [id])
  post    Post?   @relation(fields: [postId], references: [id])
  userId   String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model NewsletterSubscription {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  email          String   @unique
  subscribedAt   DateTime @default(now())
  isSubscribed   Boolean  @default(true)
  preferences    Json?    // Optional: Store any preferences for topics, frequency, etc.
  unsubscribeToken String? // Token to allow for unsubscribing via email
  createdAt DateTime @default(now())
}

model Support {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  slug      String   @unique
  body    String?
  createdAt DateTime @default(now())

}

model Chat {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  topic       String
  lastMessage  String?
  unreadCount  Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  createdAt DateTime @default(now())
}