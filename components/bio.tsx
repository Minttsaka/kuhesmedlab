/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/CFtslOrAzsP
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"
import { useState, useEffect } from 'react';
import * as Dialog from '@radix-ui/react-dialog';
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { useRouter } from "next/navigation"
import { SubmitHandler, useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { signIn } from "next-auth/react"
import { toast } from "sonner"
import { Loader2 } from "lucide-react"
import { z } from 'zod';
import axios from 'axios';
import { CheckIcon } from '@radix-ui/react-icons';
import { String } from 'aws-sdk/clients/codebuild';

const FormSchema = z.object({
  bio: z.string(),
  
});

type InputType = z.infer<typeof FormSchema>;

const wait = () => new Promise((resolve) => setTimeout(resolve, 1000));

export function Bio({name}:{name:String}) {

  const [open, setOpen] = useState(true);
  const [currentMessage, setCurrentMessage] = useState('');
  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);
  const [currentCharIndex, setCurrentCharIndex] = useState(0);
  const [isFinished, setIsFinished] = useState(false);
  const [messages, setMessages] = useState<string[]>([
    "Welcome again!"
  ]);

  const prompt = `Generate a JavaScript array of strings 
  that contains a welcoming message for a new user called ${name} at KUHESMedlab. 
  The schema should look like this:
 [
    "Welcome again!",
    "Now I want.",
    "to tell me",
    "about yourself.",
    "a little bit",
    "more text"
  ].
  Please replace the text with a more personalized and friendly welcoming message.
  The array should contain a personalized, friendly message split into multiple parts. Each string in the array should
    represent a part of the message.`



  useEffect(() => {
    const aiWelcome = async(prompt:string)=>{
      const response = await axios.post('/api/openai/',{
          prompt,
      })
      console.log(response.data)
  
      //setMessages(JSON.parse(response.data))
      setMessages([...messages, ...JSON.parse(response.data)]);
    
    }
    aiWelcome(prompt)
  },[])

  useEffect(() => {
   
    if (currentMessageIndex < messages?.length) {
      if (currentCharIndex < messages?.[currentMessageIndex].length) {
        const timeoutId = setTimeout(() => {
          setCurrentMessage(
            (prev) => prev + messages[currentMessageIndex][currentCharIndex]
          );
          setCurrentCharIndex((prev) => prev + 1);
        }, 150);
        return () => clearTimeout(timeoutId);
      } else {
        const timeoutId = setTimeout(() => {
          setCurrentMessage('');
          setCurrentCharIndex(0);
          setCurrentMessageIndex((prev) => prev + 1);
        }, 1000);
        return () => clearTimeout(timeoutId);
      }
    } else {
      setIsFinished(true);
    }
  }, [currentCharIndex,currentMessage, messages]);

  const router=useRouter()

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<InputType>({
    resolver: zodResolver(FormSchema),
  });

  const onSubmit: SubmitHandler<InputType> = async (data) => {

    const {bio} = data
    const result = await axios.post("/api/bio", {
      bio
    });
    if (result.data==="success") {
      toast.success("Thank you.");
      router.refresh()
      return;
    }

    
  };

  return (
    <div className='fixed inset-0 flex items-center justify-center bg-black bg-opacity-80'>

        <div className='min-w-[300px] md:min-w-[500px] mx-auto'>

          <p
        className="text-2xl text-white font-bold typewriter "
        // style={{ width: `${currentMessage.length}ch` }}
      >
        {currentMessage} {!isFinished && <span className='h-10 w-1 blinker'>|</span>}
      </p>
          {isFinished && messages.length > 3  && (
            <form onSubmit={handleSubmit(onSubmit)} className="grid gap-4 py-4 w-full">
            <Textarea  {...register("bio")} placeholder="Enter your description here...who you are or want you like" className="min-h-[150px] text-white min-w-xl bg-transparent border placeholder:text-gray-200" />
            <Button size={'icon'} type="submit" className="w-full rounded-full bg-green-400" disabled={isSubmitting}>{ isSubmitting ? <LoadingSpinner /> : <CheckIcon />}</Button>
          </form>
          )}
        </div>
    </div>
  )
}

const LoadingSpinner: React.FC = () => {
  return (
    <svg
      className="animate-spin h-6 w-6 text-gray-500"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        className="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        strokeWidth="4"
      ></circle>
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8v8H4z"
      ></path>
    </svg>
  );
};

