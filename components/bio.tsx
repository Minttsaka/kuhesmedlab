/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/CFtslOrAzsP
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"
import { useState, useEffect } from 'react';
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { useRouter } from "next/navigation"
import { SubmitHandler, useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { signIn } from "next-auth/react"
import { toast } from "sonner"
import { Loader2 } from "lucide-react"
import { z } from 'zod';
import axios from 'axios';

const FormSchema = z.object({
  bio: z.string(),
  
});

type InputType = z.infer<typeof FormSchema>;

export function Bio() {


  const messages = [
    "Welcome again!",
    "Now i want.",
    "to tell me",
    "about yourself.",
    "a little bit",

  ];

  const [currentMessage, setCurrentMessage] = useState('');
  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);
  const [currentCharIndex, setCurrentCharIndex] = useState(0);
  const [isFinished, setIsFinished] = useState(false);

  useEffect(() => {
    if (currentMessageIndex < messages.length) {
      if (currentCharIndex < messages[currentMessageIndex].length) {
        const timeoutId = setTimeout(() => {
          setCurrentMessage(
            (prev) => prev + messages[currentMessageIndex][currentCharIndex]
          );
          setCurrentCharIndex((prev) => prev + 1);
        }, 150);
        return () => clearTimeout(timeoutId);
      } else {
        const timeoutId = setTimeout(() => {
          setCurrentMessage('');
          setCurrentCharIndex(0);
          setCurrentMessageIndex((prev) => prev + 1);
        }, 1000);
        return () => clearTimeout(timeoutId);
      }
    } else {
      setIsFinished(true);
    }
  }, [currentCharIndex, currentMessageIndex, messages]);

  const router=useRouter()

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm<InputType>({
    resolver: zodResolver(FormSchema),
  });

  const onSubmit: SubmitHandler<InputType> = async (data) => {

    const {bio} = data
    const result = await axios.post("/api/bio", {
      bio
    });
    if (result.data==="success") {
      toast.success("Thank you.");
      router.refresh()
      return;
    }

    
  };

  return (
    <Dialog defaultOpen>
      <DialogTrigger asChild>
        <Button variant="outline">Describe Yourself</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[500px]">
  
          {/* <DialogTitle>Tell Us About Yourself</DialogTitle> */}
          <DialogDescription>
          <p
        className="text-2xl text-black font-bold typewriter"
        style={{ width: `${currentMessage.length}ch` }}
      >
        {currentMessage}
      </p>
          {isFinished && (
            <form onSubmit={handleSubmit(onSubmit)} className="grid gap-4 py-4">
            <Textarea  {...register("bio")} placeholder="Enter your description here...who you are or want you like" className="min-h-[150px]" />
            <div className="flex justify-end gap-2">
            <Button type="submit" className="w-full rounded-md" disabled={isSubmitting}>{ isSubmitting ?" wait a little bit.." : "Submit"}</Button>
            </div>
          </form>
          )}
          </DialogDescription>
      </DialogContent>
    </Dialog>
  )
}
