/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/GhO0F22UAKL
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/

"use client"
import {  StarFilledIcon, } from "@radix-ui/react-icons"
import Link from "next/link"
import { useEffect, useState } from "react";

type Article = {
  id: string;
  title: string;
  summary: string;
  link: string;
  published: string;
  updated: string;
  authors: { name: string; affiliation: string }[];
};


export function RelatedResearch({title}:{title:string}) {

  const [articles, setArticles] = useState<Article[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(
          `http://export.arxiv.org/api/query?search_query=all:${title}&start=0&max_results=9`
        );
        const text = await response.text();
    
        const parser = new DOMParser();
        const xml = parser.parseFromString(text, 'application/xml');
    
        const entries = xml.getElementsByTagName('entry');
        const data: Article[] = [];
    
        for (let i = 0; i < entries.length; i++) {
          const id = entries[i].getElementsByTagName('id')[0].textContent || '';
          const title = entries[i].getElementsByTagName('title')[0].textContent || '';
          const summary = entries[i].getElementsByTagName('summary')[0].textContent || '';
          const link = id; // Use the ID as the link
          const published = entries[i].getElementsByTagName('published')[0].textContent || '';
          const updated = entries[i].getElementsByTagName('updated')[0].textContent || '';
    
          const authors: { name: string; affiliation: string }[] = [];
          const authorElements = entries[i].getElementsByTagName('author');
    
          for (let j = 0; j < authorElements.length; j++) {
            const name = authorElements[j].getElementsByTagName('name')[0].textContent || '';
            const affiliation = authorElements[j].getElementsByTagName('arxiv:affiliation')[0]
              ?.textContent || 'Unknown affiliation';
            authors.push({ name, affiliation });
          }
    
          data.push({ id, title, summary, link, published, updated, authors });
        }
    
        setArticles(data);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching data:', error);
        setLoading(false);
      }
    };
    

    fetchData();
  }, []);

  if (loading) return <div className="flex justify-center">
    <LoadingSpinner />
  </div>
  return (
    <section className=" bg-background py-10 px-2 md:px-6">
        <div className="mb-8">
          <h2 className="text-2xl font-bold tracking-tight">Related Research</h2>
          <p className="text-muted-foreground">Discover related research papers and content based on your interests.</p>
        </div>
        <div className="grid gap-6 lg:grid-cols-3">
        {articles.map((article, index) => (
          <Link key={index} href={`${article.link}`} className="rounded-lg bg-muted p-4 transition-colors hover:bg-muted/50" prefetch={false}>
            <div className="items-start gap-4">
                <h3 className="text-lg group-hover:text-primary">
                {article.title}
                </h3>
                <ul className="list-disc ml-2 text-sm text-muted-foreground">
                  {article.authors.map((author, idx) => (
                    <li key={idx} className="text-sm">
                      {author.name} 
                    </li>
                  ))}
                </ul>
                <p className="mt-2 text-sm line-clamp-5">
                {article.summary}
                </p>
                <div className="md:flex gap-2 my-2 items-center">
                  <p className="text-sm text-gray-500">Published: {new Date(article.published).toLocaleDateString()}</p>
                  <p className="text-sm text-gray-500">Updated: {new Date(article.updated).toLocaleDateString()}</p>
                </div>
              <div className="shrink-0">
                <StarFilledIcon className="text-purple-400" />
              </div>
            </div>
          </Link>
          ))}
          <ul>
      </ul>
        </div>
    </section>
  )
}


const LoadingSpinner: React.FC = () => {
  return (
    <svg
      className="animate-spin h-10 w-10 text-gray-500"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        className="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        strokeWidth="4"
      ></circle>
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8v8H4z"
      ></path>
    </svg>
  );
};

