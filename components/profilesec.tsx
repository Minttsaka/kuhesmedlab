/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/AaX1bpgG012
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

"use client"
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Button } from "@/components/ui/button"
import { CartesianGrid, XAxis, Line, LineChart, Bar, BarChart } from "recharts"
import { ChartTooltipContent, ChartTooltip, ChartContainer } from "@/components/ui/chart"
import DeleteAccount from "./DeleteAccount"
import { useState } from 'react'
import { FileText, Download, Trash2, Upload } from 'lucide-react'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ScrollArea, ScrollBar } from "@/components/ui/scroll-area"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { File, Prisma } from "@prisma/client"

type UserWithAllRelations = Prisma.UserGetPayload<{
  include:{
    research:{
      include:{
        collaborator:true,
        surveys:{
          include:{
            surveyForm:{
              include:{
                questions:true
              }
            }
          }
        }
      }
    },
  }
}>;

type Document = {
  id: string;
  name: string;
  size: string;
  uploadDate: string;
  url: string;
}

export function Profilesec({user, files}:{ user:UserWithAllRelations, files:File[] }) {

  const handleDownload = (document: File) => {
    // In a real application, this would trigger the file download
    console.log(`Downloading ${document.filename}`);
    // You might use window.open(document.url) or a similar method here
  };

  return (
    <div>
    <div className="grid md:grid-cols-2 gap-5 mx-5 ">
      <div className=" p-10 rounded-3xl bg-white shadow">
        <div className="flex items-center space-x-4">
          <div className="h-5 w-5 rounded-full bg-purple-400" />
          <div>
            <h2 className="text-xl font-bold">Sara Johansen</h2>
            <p className="text-sm text-black">36 years old, Female</p>
          </div>
          
        </div>
        <div className="mt-6 bg-green-50 rounded-3xl p-6">
          <h3 className="text-lg font-semibold">Glucose</h3>
          <ScrollArea className="w-full">
          <LinechartChart className="aspect-[4/3] " />
          <ScrollBar className="horizontal" />
          </ScrollArea>
        </div>
        <div className="mt-6 grid md:grid-cols-3 gap-4 text-center">
          <div>
            <p className="text-sm font-semibold">Heart Rate</p>
            <p className="text-lg font-bold text-red-500">184 bpm</p>
          </div>
          <div>
            <p className="text-sm font-semibold">Temperature</p>
            <p className="text-lg font-bold text-red-500">36.6°C</p>
          </div>
          <div>
            <p className="text-sm font-semibold">Blood Pressure</p>
            <p className="text-lg font-bold text-blue-500">140/90 mm/hg</p>
          </div>
        </div>
      </div>
      <main className="max-w-[100vw] bg-white h-fit shadow rounded-3xl md:p-6">
        <Tabs className="bg-blue-50 md:m-6 rounded-3xl p-6" defaultValue="overview">
          <TabsList className="grid grid-cols-2 md:grid-cols-4 h-20 md:h-fit bg-gray-100 rounded-2xl space-x-4">
            <TabsTrigger value="survey">SURVEY</TabsTrigger>
            <TabsTrigger value="overview">AI OVERVIEW</TabsTrigger>
            <TabsTrigger value="danger">DANGER ZONE</TabsTrigger>
            <TabsTrigger value="documents">DOCUMENTS</TabsTrigger>
          </TabsList>
          <TabsContent value="survey">
          <Table className="max-w-[50px] overflow-x-auto">
                <TableHeader>
                  <TableRow>
                    <TableHead>Title</TableHead>
                    <TableHead>Number of QUestions</TableHead>
                    <TableHead>CreatedAt</TableHead>
                    <TableHead>Status</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  <TableRow>
                  {user?.research
                  .map(research=>research.surveys
                  .map(survey=>survey.surveyForm
                  .map(form=>(
                    <TableRow key={form.id}>
                  <TableCell className="flex items-center space-x-2">
                      {form.title}
                      </TableCell>
                      <TableCell className="flex items-center space-x-2">
                      {form.questions.length}
                      </TableCell>
                      <TableCell className="flex items-center space-x-2">
                      {form.createdAt.toDateString()}
                      </TableCell>
                      <TableCell className="flex items-center space-x-2">
                      {form.status==="archived" ?<CheckIcon className="w-5 h-5 text-green-500" />:<ClockIcon className="w-5 h-5 text-red-500" /> }
                      </TableCell>
                    </TableRow>
                    ))))}
                   
                  </TableRow>
                </TableBody>
              </Table>
          </TabsContent>
          <TabsContent value="overview">
            <p>
              Lorem ipsum, dolor sit amet consectetur adipisicing elit. Reiciendis,
               nihil! Alias magnam ipsa, ut sapiente rerum nulla? Libero possimus sit 
               voluptates incidunt, accusantium sed in, deleniti, doloribus quo nihil
                quisquam?
                </p>
          </TabsContent>
          <TabsContent value="danger">
            <DeleteAccount />
          </TabsContent>

          <TabsContent value="documents">
          <Card className="bg-gradient-to-br from-blue-50 to-indigo-50">
        <CardHeader className="bg-gradient-to-r from-blue-100 to-indigo-100">
          <CardTitle className="text-lg text-blue-800 flex items-center justify-between">
            <span className="flex items-center gap-2">
              <FileText className="h-6 w-6" />
              Your Documents
            </span>
          </CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          <ScrollArea className="h-[70vh] px-4">
            {files?.map((doc) => (
              <div key={doc.id} className="flex items-center justify-between py-4 border-b border-blue-100 last:border-b-0">
                <div className="flex items-center space-x-4">
                  <FileText className="h-8 w-8 text-blue-500" />
                  <div>
                    <h3 className="font-medium text-blue-800">{doc.filename}</h3>
                    <p className="text-sm text-blue-600">{doc.fileType} • Uploaded on {doc.createdAt.toDateString()}</p>
                  </div>
                </div>
                <div className="flex space-x-2">
                  <Button
                    variant="outline"
                    size="sm"
                    className="text-green-600 border-green-600 hover:bg-green-100"
                    onClick={() => handleDownload(doc)}
                  >
                    <Download className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="text-red-600 border-red-600 hover:bg-red-100"
            
                  >
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            ))}
          </ScrollArea>
        </CardContent>
      </Card>
          </TabsContent>
        </Tabs>
      </main>    
      
    </div>
      <div className="mt-6  bg-white">
          <h3 className="text-lg font-semibold">Weight</h3>
          <BarchartChart className=" aspect-[4/3] max-w-[100vw]" />
        </div>  
    </div>
  )
}

function BarchartChart(props:any) {
  return (
    <div {...props}>
      <ChartContainer
        config={{
          desktop: {
            label: "Desktop",
            color: "hsl(var(--chart-1))",
          },
        }}
        className="min-h-[300px] w-full"
      >
        <BarChart
          accessibilityLayer
          data={[
            { month: "January", desktop: 186 },
            { month: "February", desktop: 305 },
            { month: "March", desktop: 237 },
            { month: "April", desktop: 73 },
            { month: "May", desktop: 209 },
            { month: "June", desktop: 214 },
          ]}
        >
          <CartesianGrid vertical={false} />
          <XAxis
            dataKey="month"
            tickLine={false}
            tickMargin={10}
            axisLine={false}
            tickFormatter={(value) => value.slice(0, 3)}
          />
          <ChartTooltip cursor={false} content={<ChartTooltipContent hideLabel />} />
          <Bar dataKey="desktop" fill="var(--color-desktop)" radius={8} />
        </BarChart>
      </ChartContainer>
    </div>
  )
}


function CheckIcon(props:any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M20 6 9 17l-5-5" />
    </svg>
  )
}


function ClockIcon(props:any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <polyline points="12 6 12 12 16 14" />
    </svg>
  )
}


function FileIcon(props:any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
    </svg>
  )
}


function LinechartChart(props:any) {
  return (
    <div {...props}>
      <ChartContainer
        config={{
          desktop: {
            label: "Desktop",
            color: "hsl(var(--chart-1))",
          },
        }}
        className="w-full"
      >
        <LineChart
          accessibilityLayer
          data={[
            { month: "January", desktop: 186 },
            { month: "February", desktop: 305 },
            { month: "March", desktop: 237 },
            { month: "April", desktop: 73 },
            { month: "May", desktop: 209 },
            { month: "June", desktop: 214 },
          ]}
          margin={{
            left: 12,
            right: 12,
          }}
        >
          <CartesianGrid vertical={false} />
          <XAxis
            dataKey="month"
            tickLine={false}
            axisLine={false}
            tickMargin={8}
            tickFormatter={(value) => value.slice(0, 3)}
          />
          <ChartTooltip cursor={false} content={<ChartTooltipContent hideLabel />} />
          <Line dataKey="desktop" type="natural" stroke="var(--color-desktop)" strokeWidth={2} dot={false} />
        </LineChart>
      </ChartContainer>
    </div>
  )
}


function LocateIcon(props:any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="2" x2="5" y1="12" y2="12" />
      <line x1="19" x2="22" y1="12" y2="12" />
      <line x1="12" x2="12" y1="2" y2="5" />
      <line x1="12" x2="12" y1="19" y2="22" />
      <circle cx="12" cy="12" r="7" />
    </svg>
  )
}


function MessageCircleIcon(props:any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M7.9 20A9 9 0 1 0 4 16.1L2 22Z" />
    </svg>
  )
}


function PhoneIcon(props:any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" />
    </svg>
  )
}


function PlusIcon(props:any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  )
}


function XIcon(props:any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
