/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/lr0YF1X0Tbt
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/




import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"

import { 
  BookOpenIcon, 
  ClockIcon, 
  CheckCircleIcon, 
  DownloadIcon, 
} from 'lucide-react'
import { prisma } from '@/lib/prisma'
import { authOptions } from '@/lib/auth'
import { getServerSession } from 'next-auth'
import { Research, User } from '@prisma/client'
import { cn } from '@/lib/utils'
import Link from 'next/link';
import { ScrollArea, ScrollBar } from "@/components/ui/scroll-area"
import { ChevronLeft, ChevronRight, ExternalLink } from 'lucide-react'
import HandAnimation from '@/components/HandAnimation'

interface StatCardProps {
  title: string
  value: number
  icon: React.ComponentType<{ className?: string }>
  change?: number
}

function ResearchCard({ item }: { item: Research; }) {
  return (
    <Card className='w-80 shrink-0 transition-all duration-300 bg-white shadow'>
      <CardHeader>
        <CardTitle className="text-lg font-semibold line-clamp-2">{item.title}</CardTitle>
        <CardDescription className="text-sm text-blue-400">{item.status}</CardDescription>
      </CardHeader>
      <CardContent className="text-sm text-gray-500">
        <p className='line-clamp-1'><span className="font-semibold">Journal:</span> {item.journal}</p>
        {item.Published && <p><span className="font-semibold">Published Date:</span> {item.publicationDate?.toDateString()}</p>}
        <p className='line-clamp-1'><span className="font-semibold">Field:</span> {item.field}</p>
        <p className='line-clamp-1'><span className="font-semibold">Volume:</span> {item.volume}, <span className="font-semibold">Issue:</span> {item.issue}</p>
        <p className='line-clamp-1'><span className="font-semibold">Affiliation:</span> {item.affiliation}</p>
        <p className='line-clamp-1'><span className="font-semibold">Year Created:</span> {item.createdAt.toDateString()}</p>
        <p className='line-clamp-1'> <span className="font-semibold">DOI:</span> {item.doi}</p>
        <a
          href={`/mw/publication/${item.id}`}

          className="inline-flex items-center mt-2 hover:underline"
        >
          View Research <ExternalLink className="ml-1 h-4 w-4" />
        </a>
      </CardContent>
    </Card>
  )
}

const StatCard = ({ title, value, icon: Icon, change }:StatCardProps) => (
  <Card className="overflow-hidden transition-all hover:shadow-lg">
    <CardHeader className="flex flex-row items-center justify-between pb-2 space-y-0">
      <CardTitle className="text-sm font-medium">{title}</CardTitle>
      <Icon className="w-4 h-4 text-muted-foreground" />
    </CardHeader>
    <CardContent>
      <div className="text-2xl font-bold">{value}</div>
      {change && (
        <p className={`text-xs ${change > 0 ? 'text-green-500' : 'text-red-500'}`}>
          {change > 0 ? '↑' : '↓'} {Math.abs(change)}% from last month
        </p>
      )}
    </CardContent>
  </Card>
)

export default async function ResearchGreeting() {

  const session:any = await getServerSession(authOptions);
    const user = (session.user as User);

  const [
    researchNo, 
    publishedNo,
     Pending, 
     approved,
     surveyNo
    ]= await prisma.$transaction([

    
      prisma.research.count({
        where:{
          creatorId:user.id
        }
      }),
      
      prisma.research.findMany({
        where:{
          creatorId: user.id,
          publicationDate: {
            not: null,
          }},
      })
    ,
    prisma.research.findMany({
      where:{
        creatorId:user.id,
        status:"PENDING"
      }
    }),
    prisma.research.findMany({
      where:{
        creatorId:user.id,
        status:"APPROVED"
      }
    }),
      prisma.survey.count({
        where:{
          creatorId:user.id
        }
      }),
    
     
    
    ])


  return (
    <div className="w-full max-w-7xl mx-auto p-4 md:p-6 lg:p-8 space-y-8" id='overview'>
      <HandAnimation />
      
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
      <StatCard title="Total Research" value={researchNo} icon={BookOpenIcon} change={5} />
        <StatCard title="Published Research" value={publishedNo.length} icon={BookOpenIcon} change={5} />
        <StatCard title="Pending Research" value={Pending.length} icon={ClockIcon} change={-2} />
        <StatCard title="Approved Research" value={approved.length} icon={CheckCircleIcon} change={8} />
        <StatCard title="Suvery Number" value={surveyNo} icon={DownloadIcon} change={15} />
      </div>

      <Tabs defaultValue="approved" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="approved">Approved Research</TabsTrigger>
          <TabsTrigger value="pending">Pending Research</TabsTrigger>
        </TabsList>
        <TabsContent value="approved">
          {
            approved.length === 0 && <p>No Approve List</p>
          }
              <div className="relative">
                <ScrollArea className="w-full whitespace-nowrap rounded-md border border-gray-200 bg-white bg-opacity-10 backdrop-blur-md">
                  <div className="flex space-x-4 p-4">
                    {approved.map((item, index) => (
                      <ResearchCard key={index} item={item}  />
                    ))}
                  </div>
                  <ScrollBar orientation="horizontal" />
                </ScrollArea>
                
              </div>
        </TabsContent>
        <TabsContent value="pending">
        {
            Pending.length === 0 && <p>No Pending List</p>
          }
              <div className="relative">
                <ScrollArea className="w-full whitespace-nowrap rounded-md border border-gray-200 bg-white bg-opacity-10 backdrop-blur-md">
                  <div className="flex space-x-4 p-4">
                    {Pending.map((item, index) => (
                      <ResearchCard key={index} item={item} />
                    ))}
                  </div>
                  <ScrollBar orientation="horizontal" />
                </ScrollArea>
                
              </div>
        </TabsContent>
      </Tabs>
    </div>
  )
}
